{"version":3,"file":"static/js/96.24b28121.chunk.js","mappings":"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","sources":["webpack://react-homework-template/./src/components/ContactItem/ContactItem.module.css?be2b","components/ContactItem/ContactItem.jsx","webpack://react-homework-template/./src/components/ContactList/ContactList.module.css?1ce0","redux/contacts/selectors.js","components/ContactList/ContactList.jsx","webpack://react-homework-template/./src/components/ContactForm/ContactForm.module.css?b5b2","components/ContactForm/ContactForm.jsx","webpack://react-homework-template/./src/components/Filter/Filter.module.css?fad1","components/Filter/Filter.jsx","webpack://react-homework-template/./src/pages/Contacts/Contacts.module.css?fb9d","components/Loader/Loader.jsx","pages/Contacts/Contacts.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"contactItem\":\"ContactItem_contactItem__Z4FuP\",\"contactName\":\"ContactItem_contactName__ZAMAK\",\"contactBtn\":\"ContactItem_contactBtn__nMiN-\"};","import css from './ContactItem.module.css';\n\nexport const ContactItem = ({ contact: { id, name, number }, onDelete }) => {\n  return (\n    <li className={css.contactItem}>\n      <p className={css.contactName}>\n        {name}: {number}\n      </p>\n      <button\n        onClick={() => onDelete(id)}\n        type=\"button\"\n        className={css.contactBtn}\n      >\n        Delete\n      </button>\n    </li>\n  );\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"contactList\":\"ContactList_contactList__UFVCg\"};","import { createSelector } from '@reduxjs/toolkit';\n\nexport const selectFilter = state => state.filter;\nexport const selectContacts = state => state.contacts.items;\nexport const selectIsLoading = state => state.contacts.isLoading;\nexport const selectError = state => state.contacts.error;\n\nexport const filteredContacts = createSelector(\n  [selectContacts, selectFilter],\n  (contacts, filter) => {\n    const filterName = filter.toLowerCase();\n    return contacts.filter(({ name }) =>\n      name.toLowerCase().includes(filterName)\n    );\n  }\n);\n","import { ContactItem } from 'components/ContactItem/ContactItem';\nimport css from './ContactList.module.css';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { deleteContact } from '../../redux/contacts/operations';\nimport { filteredContacts } from '../../redux/contacts/selectors';\n\nexport const ContactList = () => {\n  const dispatch = useDispatch();\n\n  const contacts = useSelector(filteredContacts);\n\n  const onDelete = contactId => {\n    dispatch(deleteContact(contactId));\n  };\n\n  return (\n    <ul className={css.contactList}>\n      {contacts?.map(contact => {\n        return (\n          <ContactItem key={contact.id} contact={contact} onDelete={onDelete} />\n        );\n      })}\n    </ul>\n  );\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"form\":\"ContactForm_form__dhl+T\",\"input\":\"ContactForm_input__Bl93P\",\"label\":\"ContactForm_label__-cVXI\",\"btn\":\"ContactForm_btn__wll+u\"};","import css from './ContactForm.module.css';\nimport { nanoid } from 'nanoid';\nimport { useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectContacts } from '../../redux/contacts/selectors';\nimport { addNewContact } from '../../redux/contacts/operations';\n\nexport const ContactForm = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const onSubmit = event => {\n    event.preventDefault();\n    const newContact = {\n      id: nanoid(),\n      name,\n      number,\n    };\n    const existingName = contacts.map(item => item.name).includes(name);\n    const existingNumber = contacts.map(item => item.number).includes(number);\n\n    existingName || existingNumber\n      ? alert(`${existingNumber ? number : name} is already in contacts`)\n      : dispatch(addNewContact(newContact));\n    onReset();\n  };\n\n  const handleChange = event => {\n    const { name, value } = event.currentTarget;\n    switch (name) {\n      case 'name':\n        setName(value);\n        break;\n      case 'number':\n        setNumber(value);\n        break;\n      default:\n        break;\n    }\n  };\n\n  const onReset = () => {\n    setName('');\n    setNumber('');\n  };\n\n  const idForLabelName = nanoid();\n  const idForLabelNumber = nanoid();\n\n  return (\n    <form className={css.form} onSubmit={onSubmit}>\n      <label htmlFor={idForLabelName} className={css.label}>\n        Name\n      </label>\n      <input\n        id={idForLabelName}\n        className={css.input}\n        type=\"text\"\n        name=\"name\"\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n        title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n        required\n        value={name}\n        onChange={handleChange}\n      />\n      <label htmlFor={idForLabelNumber} className={css.label}>\n        Number\n      </label>\n      <input\n        id={idForLabelNumber}\n        className={css.input}\n        type=\"tel\"\n        name=\"number\"\n        pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n        title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n        required\n        value={number}\n        onChange={handleChange}\n      />\n      <button className={css.btn}>Add contact</button>\n    </form>\n  );\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"searchTitle\":\"Filter_searchTitle__NbKH0\",\"searchField\":\"Filter_searchField__sPwCi\"};","import { useDispatch } from 'react-redux';\nimport css from './Filter.module.css';\nimport { onFilterAction } from '../../redux/contacts/filter.slice';\n\nexport const Filter = () => {\n  const dispatch = useDispatch();\n\n  return (\n    <>\n      <h3 className={css.searchTitle}>Find contacts by name</h3>\n      <input\n        className={css.searchField}\n        type=\"text\"\n        name=\"name\"\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n        title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n        required\n        onChange={event => {\n          dispatch(onFilterAction(event.target.value));\n        }}\n      />\n    </>\n  );\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"main\":\"Contacts_main__kG0SX\",\"title\":\"Contacts_title__LxdN4\",\"warning\":\"Contacts_warning__g-4yO\"};","import { ThreeDots } from 'react-loader-spinner';\n\nexport const Loader = () => {\n  return (\n    <ThreeDots\n      color=\"#fefefe\"\n      wrapperStyle={{\n        justifyContent: 'center',\n      }}\n    />\n  );\n};\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { ContactList } from 'components/ContactList/ContactList';\nimport { ContactForm } from 'components/ContactForm/ContactForm';\nimport { Filter } from 'components/Filter/Filter';\nimport { fetchContacts } from '../../redux/contacts/operations';\nimport { selectIsLoading } from '../../redux/contacts/selectors';\nimport { selectError } from '../../redux/contacts/selectors';\nimport { selectContacts } from '../../redux/contacts/selectors';\nimport css from './Contacts.module.css';\nimport { Loader } from 'components/Loader/Loader';\n\nexport default function Contacts() {\n  const contacts = useSelector(selectContacts);\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectIsLoading);\n  const isError = useSelector(selectError);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <div className={css.main}>\n      <h1 className={css.title} title=\"Phonebook\">\n        Phonebook\n      </h1>\n      <ContactForm />\n      <h2 className={css.title} title=\"Contact\">\n        Contact\n      </h2>\n      <Filter />\n      {isLoading && !isError && <Loader />}\n      {contacts.length > 0 ? (\n        <ContactList />\n      ) : (\n        <p className={css.warning}>\n          Currently your phonebook has no contacts. <br />\n          Please add them.\n        </p>\n      )}\n    </div>\n  );\n}\n"],"names":["ContactItem","_ref","contact","id","name","number","onDelete","_jsxs","className","css","children","_jsx","onClick","type","selectContacts","state","contacts","items","selectIsLoading","isLoading","selectError","error","filteredContacts","createSelector","filter","filterName","toLowerCase","includes","ContactList","dispatch","useDispatch","useSelector","contactId","deleteContact","map","ContactForm","setName","useState","setNumber","handleChange","event","value","currentTarget","onReset","idForLabelName","nanoid","idForLabelNumber","onSubmit","preventDefault","newContact","existingName","item","existingNumber","alert","addNewContact","htmlFor","pattern","title","required","onChange","Filter","_Fragment","onFilterAction","target","Loader","ThreeDots","color","wrapperStyle","justifyContent","Contacts","isError","useEffect","fetchContacts","length"],"sourceRoot":""}